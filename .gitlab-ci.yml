variables:
  CUSTOM_CI_BUILDS_DIR: "/usr/workspace/variorum/gitlab-runner"
  BUILD_ROOT: ${CI_PROJECT_DIR}

#stages:
##  - format
#  - build
stages:
  - status_initiate
  - build
  - status_update

.on_catalyst:
  tags:
    - shell
    - catalyst
  rules:
    # Only report failure if the pipeline failed.
    - if: '$CI_JOB_NAME =~ /status_failure/'
      when: on_failure
    # A true statement is expected to allow jobs to run. Here is the default.
    - when: on_success

.status_report: &status_report
    - export context="catalyst"
    - |
      curl --url "https://api.github.com/repos/llnl/${CI_PROJECT_NAME}/statuses/${CI_COMMIT_SHA}" \
           --header 'Content-Type: application/json' \
           --header "authorization: Bearer ${GITHUB_TOKEN}" \
           --data "{ \"state\": \"${pipeline_status}\", \"target_url\": \"${CI_PIPELINE_URL}\", \"description\": \"GitLab ${context} pipeline\", \"context\": \"ci/gitlab/${context}\" }"

status_pending:
  extends: [.on_catalyst]
  stage: status_initiate
  script:
    - export pipeline_status="pending"
    - *status_report

status_success:
  extends: [.on_catalyst]
  stage: status_update
  script:
    - export pipeline_status="success"
    - *status_report
  when: on_success

status_failure:
  extends: [.on_catalyst]
  stage: status_update
  script:
    - export pipeline_status="failure"
    - *status_report
  when: on_failure

# no access to msr-safe on catalyst
build-catalyst:
 tags:
   - batch
   - catalyst
 stage: build
 script:
   # Build and install rankstr dependency
   - git clone https://github.com/ECP-VeloC/rankstr.git
   - cd rankstr
   - mkdir build install && cd build
   - cmake -DCMAKE_INSTALL_PREFIX=../install ..
   - VERBOSE=1 make -j
   - make install
   - RANKSTR_INSTALL=${PWD}/../install
   - cd ../../
   - export HOSTNAME=`hostname`
   - echo -e "Hostname:" ${HOSTNAME}
   - groups
   - mkdir build-gitlab-catalyst && mkdir install-gitlab-catalyst
   - cd build-gitlab-catalyst
   - export HOST_CONFIG=`ls ../host-configs/catalyst-toss_3_x86_64_ib-gcc@8.3.1.cmake`
   - echo -e "HOST_CONFIG:" ${HOST_CONFIG}
   - echo -e "PWD:" ${PWD}
   - cmake -C ${HOST_CONFIG} -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=../install-gitlab-catalyst -DBUILD_TESTS=ON -DENABLE_WARNINGS=ON -DRANKSTR_DIR=${RANKSTR_INSTALL} ../src
   - make VERBOSE=1
   - make install
   #- env CTEST_OUTPUT_ON_FAILURE=1 make test
   #- cd ..
   #- echo -e "PWD:" ${PWD}
   #- which cmake
   #- cmake --version
   #- cd install-gitlab-catalyst/examples/using-with-cmake/c
   #- echo -e "PWD:" ${PWD}
   #- mkdir _test_build
   #- cd _test_build
   #- cmake ../
   #- make VERBOSE=1
   #- ./variorum-print-power-example
   #- cd ../../../using-with-make/c
   #- echo -e "PWD:" ${PWD}
   #- make VERBOSE=1
   #- ./variorum-print-power-example
   #- cd ../../using-with-make/cpp
   #- echo -e "PWD:" ${PWD}
   #- make VERBOSE=1
   #- ./variorum-print-power-example
   #- cd ../../using-with-make/fortran
   #- echo -e "PWD:" ${PWD}
   #- make VERBOSE=1
   #- ./ep.W.x
## Template for jobs triggering a build-and-test sub-pipelines:
#.build:
#  stage: build
#  trigger:
#    include:
#      - local: '.gitlab/${CI_MACHINE}-build-and-test.yml'
#    strategy: depend
#    forward:
#      pipeline_variables: true

#build-quartz-format:
# tags:
#   - shell
#   - quartz
# stage: format
# script:
#   - wget https://sourceforge.net/projects/astyle/files/astyle/astyle%203.1/astyle_3.1_linux.tar.gz
#   - tar -xf astyle_3.1_linux.tar.gz
#   - cd astyle/build/gcc && make
#   - export PATH="${PWD}/bin:${PATH}"
#   - cd -
#   - echo -e "PWD:" ${PWD}
#   - ./scripts/.ci-check-code-format.sh
#   - err=$?
#   - if [ $err -eq 0 ]; then exit 0; else echo -e "Astyle formatting needed!"; exit 1; fi
#
#build-quartz-format-rst:
# tags:
#   - shell
#   - quartz
# stage: format
# script:
#   - wget https://sourceforge.net/projects/astyle/files/astyle/astyle%203.1/astyle_3.1_linux.tar.gz
#   - ./scripts/.ci-check-rst-format.sh

## build across power lab
#build-cztb2:
# tags:
#   - shell
#   - cztb2
# stage: build
# script:
#   - git clone $VARIORUM_ANSIBLE
#   - cd variorum-ansible-setup
#   - ansible-playbook variorum-powerlab-playbook.yml

#include:
#  - local: .gitlab/subscribed-pipelines.yml
#  - local: .gitlab/quartz-build-and-test.yml
#  - local: .gitlab/catalyst-build-and-test.yml
#  - local: .gitlab/lassen-cpu-build-and-test.yml
#  - local: .gitlab/lassen-gpu-build-and-test.yml
#  - local: .gitlab/corona-build-and-test.yml


